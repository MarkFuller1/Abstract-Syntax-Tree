package Baylor.AST;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.junit.Assert;
import org.junit.Test;

/*
 * Unit Tests for checking the printing out of the generated ast
 * 
 * Since the AST is generated by an outside library, I will not do the checking here.
 */
public class JavaASTTest {

	final private static String res = "List (imports){}List (types){List (modifiers){keyword (public)}interface (false)Child (name) {identifier (RecursionExampleDirectory)}List (typeParameters){}List (superInterfaceTypes){}List (bodyDeclarations){List (modifiers){keyword (public)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (int)}Child (name) {identifier (getSize)}List (parameters){List (modifiers){}Child (type) {Child (name) {identifier (Directory)}}varargs (false)Child (name) {identifier (dir)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (total)}extraDimensions (0)Child (initializer) {token (0)}}List (modifiers){}Child (type) {Child (componentType) {Child (name) {identifier (File)}}}List (fragments){Child (name) {identifier (files)}extraDimensions (0)Child (initializer) {Child (expression) {identifier (dir)}List (typeArguments){}Child (name) {identifier (getFiles)}List (arguments){}}}List (initializers){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (i)}extraDimensions (0)Child (initializer) {token (0)}}}Child (expression) {Child (leftOperand) {identifier (i)}operator (<)Child (rightOperand) {Child (qualifier) {identifier (files)}Child (name) {identifier (length)}}List (extendedOperands){}}List (updaters){Child (operand) {identifier (i)}operator (++)}Child (body) {Child (expression) {Child (leftHandSide) {identifier (total)}operator (+=)Child (rightHandSide) {Child (expression) {Child (array) {identifier (files)}Child (index) {identifier (i)}}List (typeArguments){}Child (name) {identifier (getSize)}List (arguments){}}}}List (modifiers){}Child (type) {Child (componentType) {Child (name) {identifier (Directory)}}}List (fragments){Child (name) {identifier (subs)}extraDimensions (0)Child (initializer) {Child (expression) {identifier (dir)}List (typeArguments){}Child (name) {identifier (getSubs)}List (arguments){}}}List (initializers){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (i)}extraDimensions (0)Child (initializer) {token (0)}}}Child (expression) {Child (leftOperand) {identifier (i)}operator (<)Child (rightOperand) {Child (qualifier) {identifier (subs)}Child (name) {identifier (length)}}List (extendedOperands){}}List (updaters){Child (operand) {identifier (i)}operator (++)}Child (body) {Child (expression) {Child (leftHandSide) {identifier (total)}operator (+=)Child (rightHandSide) {List (typeArguments){}Child (name) {identifier (getSize)}List (arguments){Child (array) {identifier (subs)}Child (index) {identifier (i)}}}}}Child (expression) {identifier (total)}}}List (modifiers){keyword (public)keyword (static)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (void)}Child (name) {identifier (main)}List (parameters){List (modifiers){}Child (type) {Child (componentType) {Child (name) {identifier (String)}}}varargs (false)Child (name) {identifier (args)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {Child (name) {identifier (RecursionExampleDirectory)}}List (fragments){Child (name) {identifier (r)}extraDimensions (0)Child (initializer) {List (typeArguments){}Child (type) {Child (name) {identifier (RecursionExampleDirectory)}}List (arguments){}}}List (modifiers){}Child (type) {Child (name) {identifier (Directory)}}List (fragments){Child (name) {identifier (d)}extraDimensions (0)Child (initializer) {List (typeArguments){}Child (type) {Child (name) {identifier (Directory)}}List (arguments){}}}Child (expression) {Child (expression) {Child (qualifier) {identifier (System)}Child (name) {identifier (out)}}List (typeArguments){}Child (name) {identifier (println)}List (arguments){Child (expression) {identifier (r)}List (typeArguments){}Child (name) {identifier (getSize)}List (arguments){identifier (d)}}}}}List (modifiers){keyword (public)keyword (static)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (int)}Child (name) {identifier (fact)}List (parameters){List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (n)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (result)}extraDimensions (0)Child (initializer) {token (0)}}Child (expression) {Child (leftOperand) {identifier (n)}operator (==)Child (rightOperand) {token (0)}List (extendedOperands){}}Child (thenStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {token (1)}}}Child (elseStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {Child (leftOperand) {identifier (n)}operator (*)Child (rightOperand) {List (typeArguments){}Child (name) {identifier (fact)}List (arguments){Child (leftOperand) {identifier (n)}operator (-)Child (rightOperand) {token (1)}List (extendedOperands){}}}List (extendedOperands){}}}}Child (expression) {identifier (result)}}}List (modifiers){keyword (public)keyword (static)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (int)}Child (name) {identifier (pow)}List (parameters){List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (base)}extraDimensions (0)List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (exp)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (result)}extraDimensions (0)Child (initializer) {token (0)}}Child (expression) {Child (leftOperand) {identifier (exp)}operator (==)Child (rightOperand) {token (0)}List (extendedOperands){}}Child (thenStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {token (1)}}}Child (elseStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {Child (leftOperand) {identifier (base)}operator (*)Child (rightOperand) {List (typeArguments){}Child (name) {identifier (pow)}List (arguments){identifier (base)Child (leftOperand) {identifier (exp)}operator (-)Child (rightOperand) {token (1)}List (extendedOperands){}}}List (extendedOperands){}}}}Child (expression) {identifier (result)}}}List (modifiers){keyword (public)keyword (static)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (int)}Child (name) {identifier (fib)}List (parameters){List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (n)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (result)}extraDimensions (0)Child (initializer) {token (0)}}Child (expression) {Child (leftOperand) {Child (leftOperand) {identifier (n)}operator (==)Child (rightOperand) {token (1)}List (extendedOperands){}}operator (||)Child (rightOperand) {Child (leftOperand) {identifier (n)}operator (==)Child (rightOperand) {token (2)}List (extendedOperands){}}List (extendedOperands){}}Child (thenStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {token (1)}}}Child (elseStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {Child (leftOperand) {List (typeArguments){}Child (name) {identifier (fib)}List (arguments){Child (leftOperand) {identifier (n)}operator (-)Child (rightOperand) {token (1)}List (extendedOperands){}}}operator (+)Child (rightOperand) {List (typeArguments){}Child (name) {identifier (fib)}List (arguments){Child (leftOperand) {identifier (n)}operator (-)Child (rightOperand) {token (2)}List (extendedOperands){}}}List (extendedOperands){}}}}Child (expression) {identifier (result)}}}List (modifiers){keyword (public)keyword (static)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (int)}Child (name) {identifier (minWasted)}List (parameters){List (modifiers){}Child (type) {Child (componentType) {primitiveTypeCode (int)}}varargs (false)Child (name) {identifier (items)}extraDimensions (0)List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (itemNum)}extraDimensions (0)List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (capLeft)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (result)}extraDimensions (0)Child (initializer) {token (0)}}Child (expression) {Child (leftOperand) {identifier (itemNum)}operator (>=)Child (rightOperand) {Child (qualifier) {identifier (items)}Child (name) {identifier (length)}}List (extendedOperands){}}Child (thenStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {identifier (capLeft)}}}Child (elseStatement) {Child (expression) {Child (leftOperand) {identifier (capLeft)}operator (==)Child (rightOperand) {token (0)}List (extendedOperands){}}Child (thenStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {token (0)}}}Child (elseStatement) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (minWithout)}extraDimensions (0)Child (initializer) {List (typeArguments){}Child (name) {identifier (minWasted)}List (arguments){identifier (items)Child (leftOperand) {identifier (itemNum)}operator (+)Child (rightOperand) {token (1)}List (extendedOperands){}identifier (capLeft)}}}Child (expression) {Child (leftOperand) {identifier (capLeft)}operator (<=)Child (rightOperand) {Child (array) {identifier (items)}Child (index) {identifier (itemNum)}}List (extendedOperands){}}Child (thenStatement) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (minWith)}extraDimensions (0)Child (initializer) {List (typeArguments){}Child (name) {identifier (minWasted)}List (arguments){identifier (items)Child (leftOperand) {identifier (itemNum)}operator (+)Child (rightOperand) {token (1)}List (extendedOperands){}Child (leftOperand) {identifier (capLeft)}operator (-)Child (rightOperand) {Child (array) {identifier (items)}Child (index) {identifier (itemNum)}}List (extendedOperands){}}}}Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {Child (expression) {identifier (Math)}List (typeArguments){}Child (name) {identifier (min)}List (arguments){identifier (minWith)identifier (minWithout)}}}}}Child (elseStatement) {Child (expression) {Child (leftHandSide) {identifier (result)}operator (=)Child (rightHandSide) {identifier (minWithout)}}}}}}Child (expression) {identifier (result)}}}}List (modifiers){}interface (false)Child (name) {identifier (Directory)}List (typeParameters){}List (superInterfaceTypes){}List (bodyDeclarations){List (modifiers){keyword (private)}Child (type) {Child (componentType) {Child (name) {identifier (Directory)}}}List (fragments){Child (name) {identifier (mySubs)}extraDimensions (0)}List (modifiers){keyword (private)}Child (type) {Child (componentType) {Child (name) {identifier (File)}}}List (fragments){Child (name) {identifier (myFiles)}extraDimensions (0)}List (modifiers){keyword (public)}constructor (true)List (typeParameters){}Child (name) {identifier (Directory)}List (parameters){}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (numSubs)}extraDimensions (0)Child (initializer) {Child (type) {primitiveTypeCode (int)}Child (expression) {Child (expression) {Child (leftOperand) {Child (expression) {identifier (Math)}List (typeArguments){}Child (name) {identifier (random)}List (arguments){}}operator (*)Child (rightOperand) {token (3)}List (extendedOperands){}}}}}Child (expression) {Child (leftHandSide) {identifier (mySubs)}operator (=)Child (rightHandSide) {Child (type) {Child (componentType) {Child (name) {identifier (Directory)}}}List (dimensions){identifier (numSubs)}}}List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (numFiles)}extraDimensions (0)Child (initializer) {Child (type) {primitiveTypeCode (int)}Child (expression) {Child (expression) {Child (leftOperand) {Child (expression) {identifier (Math)}List (typeArguments){}Child (name) {identifier (random)}List (arguments){}}operator (*)Child (rightOperand) {token (10)}List (extendedOperands){}}}}}Child (expression) {Child (leftHandSide) {identifier (myFiles)}operator (=)Child (rightHandSide) {Child (type) {Child (componentType) {Child (name) {identifier (File)}}}List (dimensions){identifier (numFiles)}}}List (initializers){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (i)}extraDimensions (0)Child (initializer) {token (0)}}}Child (expression) {Child (leftOperand) {identifier (i)}operator (<)Child (rightOperand) {Child (qualifier) {identifier (myFiles)}Child (name) {identifier (length)}}List (extendedOperands){}}List (updaters){Child (operand) {identifier (i)}operator (++)}Child (body) {Child (expression) {Child (leftHandSide) {Child (array) {identifier (myFiles)}Child (index) {identifier (i)}}operator (=)Child (rightHandSide) {List (typeArguments){}Child (type) {Child (name) {identifier (File)}}List (arguments){Child (type) {primitiveTypeCode (int)}Child (expression) {Child (expression) {Child (leftOperand) {Child (expression) {identifier (Math)}List (typeArguments){}Child (name) {identifier (random)}List (arguments){}}operator (*)Child (rightOperand) {token (1000)}List (extendedOperands){}}}}}}}List (initializers){List (modifiers){}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (i)}extraDimensions (0)Child (initializer) {token (0)}}}Child (expression) {Child (leftOperand) {identifier (i)}operator (<)Child (rightOperand) {Child (qualifier) {identifier (mySubs)}Child (name) {identifier (length)}}List (extendedOperands){}}List (updaters){Child (operand) {identifier (i)}operator (++)}Child (body) {Child (expression) {Child (leftHandSide) {Child (array) {identifier (mySubs)}Child (index) {identifier (i)}}operator (=)Child (rightHandSide) {List (typeArguments){}Child (type) {Child (name) {identifier (Directory)}}List (arguments){}}}}}}List (modifiers){keyword (public)}constructor (false)List (typeParameters){}Child (returnType2) {Child (componentType) {Child (name) {identifier (Directory)}}}Child (name) {identifier (getSubs)}List (parameters){}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){Child (expression) {identifier (mySubs)}}}List (modifiers){keyword (public)}constructor (false)List (typeParameters){}Child (returnType2) {Child (componentType) {Child (name) {identifier (File)}}}Child (name) {identifier (getFiles)}List (parameters){}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){Child (expression) {identifier (myFiles)}}}}List (modifiers){}interface (false)Child (name) {identifier (File)}List (typeParameters){}List (superInterfaceTypes){}List (bodyDeclarations){List (modifiers){keyword (private)}Child (type) {primitiveTypeCode (int)}List (fragments){Child (name) {identifier (iMySize)}extraDimensions (0)}List (modifiers){keyword (public)}constructor (true)List (typeParameters){}Child (name) {identifier (File)}List (parameters){List (modifiers){}Child (type) {primitiveTypeCode (int)}varargs (false)Child (name) {identifier (size)}extraDimensions (0)}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){Child (expression) {Child (leftHandSide) {identifier (iMySize)}operator (=)Child (rightHandSide) {identifier (size)}}}}List (modifiers){keyword (public)}constructor (false)List (typeParameters){}Child (returnType2) {primitiveTypeCode (int)}Child (name) {identifier (getSize)}List (parameters){}extraDimensions (0)List (thrownExceptions){}Child (body) {List (statements){Child (expression) {identifier (iMySize)}}}}}";

	/*
	 * This test checks to make sure all of the files located within the root dir
	 * are found In this test there is only one file to be found
	 */
	@Test
	public void shouldReturnAllRecursiveJavaFiles() {
		ArrayList<String> solution = new ArrayList<>();

		// get the path to the testing dir
		String cwd = System.getProperty("user.dir");
		cwd += File.separatorChar + "src" + File.separatorChar + "test" + File.separatorChar + "java"
				+ File.separatorChar + "testResources";

		// create the solution manually
		solution.add(cwd + File.separatorChar + "RecursionExampleDirectory.java");

		// System.out.println(cwd);

		// call funtion that is being tested
		ArrayList<String> files = JavaAST.getSrcCode(new File(cwd));

		// assert that the solution is the same as the computed answer
		Assert.assertEquals(solution, files);
	}

	// This tests to make sure the Printed ast is valid and expected.
	@Test
	public void checkAST() throws IOException {
		// get the project directory
		String cwd = System.getProperty("user.dir");
		cwd += File.separatorChar + "src" + File.separatorChar + "test" + File.separatorChar + "java"
				+ File.separatorChar + "testResources" + File.separatorChar + "RecursionExampleDirectory.java";

		System.out.println(cwd);

		// generate the source code and AST
		ASTParser parser = ASTParser.newParser(AST.JLS3);
		parser.setSource(new String(Files.readAllBytes(Paths.get(cwd))).toCharArray());
		parser.setKind(ASTParser.K_COMPILATION_UNIT);

		final ASTNode node = (CompilationUnit) parser.createAST(null);
		JavaAST.sb = new StringBuilder();
		// print the ast
		JavaAST.print(node);

		// check the computed against the constant
		Assert.assertTrue(JavaAST.sb.toString().equals(JavaASTTest.res));
	}
}
